#!/usr/bin/env python

from jinja2 import Environment, DictLoader, select_autoescape

import yaml
import os

f = open('Dockerfile.python', 'r')

docker_python = f.read()
f.close()



with open('versions.yml', 'rb') as infile:
    versions = yaml.load(infile)

    env = Environment(
        loader=DictLoader({'Dockerfile.python': docker_python})
    )
    template = env.get_template('Dockerfile.python')
    os.makedirs('docker/python', mode=0o755)

    for pv in versions['python']:
        dp = open('docker/python/Dockerfile.python.{0}'.format(pv), 'w')

        context = {
            'python_version': pv
        }

        dp.write(template.render(**context))
        dp.close()

    # f = open('Dockerfile.jolokia.wildfly', 'r')
    # jolokia_wildfly = f.read()
    # f.close()

    # env = Environment(
    #     loader=DictLoader({'Dockerfile.jolokia.wildfly': jolokia_wildfly})
    # )
    # template = env.get_template('Dockerfile.jolokia.wildfly')
    # os.makedirs('docker/jolokia/wildfly', mode=0o755)

    # for jv in versions['jolokia']:
    #     for wv in versions['app-servers']['wildfly']:
    #         try:
    #             os.mkdir('docker/jolokia/wildfly/{0}'.format(wv), mode=0o755)
    #         except FileExistsError:
    #             pass
    #         jp = open('docker/jolokia/wildfly/{0}/Dockerfile.jolokia{1}'.format(wv, jv['agent']), 'w')
    #         context = {
    #             'wildfly_version': wv,
    #             'jolokia_version': jv['agent']
    #         }

    #         jp.write(template.render(**context))
    #         jp.close()

    f = open('Dockerfile.jolokia.tomcat', 'r')
    jolokia_tomcat = f.read()
    f.close()

    env = Environment(
        loader=DictLoader({'Dockerfile.jolokia.tomcat': jolokia_tomcat})
    )
    template = env.get_template('Dockerfile.jolokia.tomcat')
    os.makedirs('docker/jolokia/tomcat', mode=0o755)

    for jv in versions['jolokia']:
        for tv in versions['app-servers']['tomcat']:
            try:
                os.mkdir('docker/jolokia/tomcat/{0}'.format(tv), mode=0o755)
            except FileExistsError:
                pass
            jp = open('docker/jolokia/tomcat/{0}/Dockerfile.jolokia{1}'.format(tv, jv['agent']), 'w')
            context = {
                'tomcat_version': tv,
                'jolokia_version': jv['agent']
            }

            jp.write(template.render(**context))
            jp.close()
